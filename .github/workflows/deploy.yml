name: Deployment

on:
  push:
    branches: ['main']

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PUBLIC_POCKETBASE_URL: ${{ vars.PUBLIC_POCKETBASE_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 'latest'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Prune dev dependencies
        run: npm prune --omit=dev

      - name: Create release bundle
        run: |
          RELEASE_DIR=release
          rm -rf "$RELEASE_DIR" campus-release.tar.gz
          mkdir "$RELEASE_DIR"
          rsync -a --delete \
            --exclude '.git' \
            --exclude 'release' \
            --exclude 'node_modules' \
            --exclude '.svelte-kit' \
            --exclude 'build' \
            --exclude 'tmp_pb' \
            --exclude 'pb_data' \
            --exclude 'pb_migrations_backup' \
            --exclude 'test-results' \
            --exclude 'tests' \
            --exclude 'e2e' \
            --exclude 'playwright-report' \
            ./ "$RELEASE_DIR"/
          cp -a build "$RELEASE_DIR"/
          cp -a node_modules "$RELEASE_DIR"/
          tar -czf campus-release.tar.gz --mode='u+rwX,go+rX,go-w' -C "$RELEASE_DIR" .

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Upload release bundle
        run: |
          rsync -az \
            -e "ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10" \
            campus-release.tar.gz \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/campus/source/campus-release.tar.gz

      - name: Activate release
        run: |
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o ServerAliveCountMax=10 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            set -euo pipefail
            APP_DIR=/opt/campus
            RELEASES=\$APP_DIR/releases
            BUNDLE=\$APP_DIR/source/campus-release.tar.gz
            if [ ! -f \"\$BUNDLE\" ]; then
              echo 'Bundle not found on remote host' >&2
              exit 1
            fi
            TS=\$(date +%Y%m%d%H%M%S)
            RELEASE=\$RELEASES/\$TS
            mkdir -p \"\$RELEASES\"
            mkdir -p \"\$RELEASE\"
            tar -xzf \"\$BUNDLE\" -C \"\$RELEASE\"
            rm -f \"\$BUNDLE\"
            ln -sfn \"\$RELEASE\" \"\$APP_DIR/current\"
            sudo systemctl daemon-reload || true
            sudo systemctl restart pocketbase.service || true
            sudo systemctl restart campus-app.service
            cd \"\$RELEASES\"
            ls -1tr | head -n -5 | xargs -r rm -rf
            echo \"Activated release \$TS\"
          "
